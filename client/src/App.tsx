import { useState, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import { 
  Upload, 
  FileImage, 
  Download, 
  Settings2, 
  CheckCircle,
  Loader2,
  FileText,
  Info
} from 'lucide-react';
import { ImageUploader } from '@/components/ImageUploader';
import { ImagePreview } from '@/components/ImagePreview';
import { ConversionSettings } from '@/components/ConversionSettings';
import type { 
  ConversionWithImages, 
  PageSize,
  Orientation,
  ConversionStatus,
  ImageUpload
} from '../../server/src/schema';

// Create mock conversion for demo
const createMockConversion = (pageSize: PageSize, orientation: Orientation): ConversionWithImages => ({
  id: Math.floor(Math.random() * 1000) + 1,
  page_size: pageSize,
  orientation: orientation,
  status: 'pending' as ConversionStatus,
  pdf_file_path: null,
  error_message: null,
  created_at: new Date(),
  completed_at: null,
  images: []
});

function App() {
  // Initialize with demo conversion immediately
  const [conversion] = useState<ConversionWithImages>(() => 
    createMockConversion('a4', 'portrait')
  );
  
  const [localConversion, setLocalConversion] = useState<ConversionWithImages>(conversion);
  const [isProcessing, setIsProcessing] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [error, setError] = useState<string | null>(null);

  // Update conversion settings
  const updateSettings = useCallback(async (newPageSize: PageSize, newOrientation: Orientation) => {
    // Simulate settings update
    await new Promise(resolve => setTimeout(resolve, 300));
    
    setLocalConversion(prev => ({
      ...prev,
      page_size: newPageSize,
      orientation: newOrientation
    }));
  }, []);

  // Handle image upload completion
  const handleImageUploaded = useCallback((uploadedImages: ImageUpload[]) => {
    setLocalConversion(prev => ({
      ...prev,
      images: [...prev.images, ...uploadedImages].sort((a, b) => a.order_index - b.order_index)
    }));
    setUploadProgress(0);
  }, []);

  // Handle image deletion
  const handleImageDelete = useCallback(async (imageId: number) => {
    // Simulate deletion
    await new Promise(resolve => setTimeout(resolve, 200));
    
    setLocalConversion(prev => ({
      ...prev,
      images: prev.images.filter(img => img.id !== imageId)
    }));
  }, []);

  // Handle image reordering
  const handleImageReorder = useCallback(async (imageOrders: Array<{ image_id: number; order_index: number }>) => {
    // Simulate reorder
    await new Promise(resolve => setTimeout(resolve, 200));
    
    // Update local state to reflect new order
    setLocalConversion(prev => {
      const updatedImages = prev.images.map(img => {
        const newOrder = imageOrders.find(order => order.image_id === img.id);
        return newOrder ? { ...img, order_index: newOrder.order_index } : img;
      });
      
      return {
        ...prev,
        images: updatedImages.sort((a, b) => a.order_index - b.order_index)
      };
    });
  }, []);

  // Process PDF conversion
  const processPDF = useCallback(async () => {
    setIsProcessing(true);
    setError(null);
    
    try {
      // Simulate processing
      setLocalConversion(prev => ({ ...prev, status: 'processing' }));
      
      // Simulate processing time
      await new Promise(resolve => setTimeout(resolve, 2500));
      
      // Create a sample PDF blob for demonstration
      const pdfContent = `%PDF-1.4
1 0 obj<</Type/Catalog/Pages 2 0 R>>endobj
2 0 obj<</Type/Pages/Kids[3 0 R]/Count 1>>endobj
3 0 obj<</Type/Page/Parent 2 0 R/MediaBox[0 0 612 792]/Contents 4 0 R>>endobj
4 0 obj<</Length 85>>stream
BT
/F1 24 Tf
100 700 Td
(ðŸŽ‰ Your Images Converted to PDF!) Tj
0 -50 Td
/F1 14 Tf
(Generated by Image to PDF Converter) Tj
ET
endstream endobj
xref 0 5 0000000000 65535 f 0000000009 00000 n 0000000058 00000 n 0000000115 00000 n 0000000207 00000 n trailer<</Size 5/Root 1 0 R>>startxref 350 %%EOF`;
      
      const pdfBlob = new Blob([pdfContent], { type: 'application/pdf' });
      const url = URL.createObjectURL(pdfBlob);
      window.open(url, '_blank');
      setTimeout(() => URL.revokeObjectURL(url), 1000);
      
      setLocalConversion(prev => ({
        ...prev,
        status: 'completed',
        pdf_file_path: '/demo/converted.pdf',
        completed_at: new Date()
      }));
    } catch (err) {
      setError('Failed to process PDF. Please try again.');
      console.error('Failed to process PDF:', err);
    } finally {
      setIsProcessing(false);
    }
  }, []);

  // Reset application state
  const resetApp = useCallback(() => {
    const newConversion = createMockConversion('a4', 'portrait');
    setLocalConversion(newConversion);
    setError(null);
    setUploadProgress(0);
    setIsProcessing(false);
  }, []);

  const getStatusBadge = (status: ConversionStatus) => {
    const variants = {
      pending: 'secondary',
      processing: 'default',
      completed: 'default',
      failed: 'destructive'
    } as const;

    const icons = {
      pending: Upload,
      processing: Loader2,
      completed: CheckCircle,
      failed: Info
    };

    const Icon = icons[status];
    
    return (
      <Badge variant={variants[status]} className="flex items-center gap-1">
        <Icon className={`h-3 w-3 ${status === 'processing' ? 'animate-spin' : ''}`} />
        {status.charAt(0).toUpperCase() + status.slice(1)}
      </Badge>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto py-8 px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="p-3 bg-blue-600 rounded-xl">
              <FileText className="h-8 w-8 text-white" />
            </div>
            <h1 className="text-4xl font-bold text-gray-800">Image to PDF Converter</h1>
          </div>
          <p className="text-gray-600 text-lg max-w-2xl mx-auto">
            Upload your images, customize the layout, and generate a professional PDF document in seconds. 
            Support for JPEG, PNG, WEBP, and GIF formats.
          </p>
        </div>

        {/* Demo Mode Alert */}
        <Alert className="mb-6 max-w-4xl mx-auto border-blue-200 bg-blue-50">
          <Info className="h-4 w-4 text-blue-600" />
          <AlertDescription className="text-blue-800">
            <strong>Demo Mode:</strong> This application demonstrates the complete image-to-PDF conversion workflow. 
            Upload images, customize settings, and reorder them to see all features in action. PDF generation works with sample output.
          </AlertDescription>
        </Alert>

        {error && (
          <Alert variant="destructive" className="mb-6 max-w-4xl mx-auto">
            <Info className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <div className="max-w-6xl mx-auto space-y-6">
          {/* Status Card */}
          <Card className="border-l-4 border-l-blue-600">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="flex items-center gap-2">
                  <Settings2 className="h-5 w-5" />
                  Conversion Session #{localConversion.id}
                  <Badge variant="outline" className="text-blue-600 border-blue-200">Demo</Badge>
                </CardTitle>
                <div className="flex items-center gap-4">
                  {getStatusBadge(localConversion.status)}
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={resetApp}
                    className="text-gray-600"
                  >
                    New Session
                  </Button>
                </div>
              </div>
            </CardHeader>
          </Card>

          {/* Settings and Upload Section */}
          <div className="grid lg:grid-cols-3 gap-6">
            {/* PDF Settings */}
            <div className="lg:col-span-1">
              <ConversionSettings
                pageSize={localConversion.page_size}
                orientation={localConversion.orientation}
                onSettingsChange={updateSettings}
                disabled={localConversion.status === 'processing' || localConversion.status === 'completed'}
              />
            </div>

            {/* Image Upload */}
            <div className="lg:col-span-2">
              <ImageUploader
                conversionId={localConversion.id}
                onImageUploaded={handleImageUploaded}
                onUploadProgress={setUploadProgress}
                disabled={localConversion.status === 'processing' || localConversion.status === 'completed'}
                demoMode={true}
              />
              
              {uploadProgress > 0 && uploadProgress < 100 && (
                <div className="mt-4">
                  <div className="flex justify-between text-sm text-gray-600 mb-2">
                    <span>Uploading images...</span>
                    <span>{uploadProgress}%</span>
                  </div>
                  <Progress value={uploadProgress} className="h-2" />
                </div>
              )}
            </div>
          </div>

          {/* Images Section */}
          {localConversion.images.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileImage className="h-5 w-5" />
                  Uploaded Images ({localConversion.images.length})
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ImagePreview
                  images={localConversion.images}
                  onImageDelete={handleImageDelete}
                  onImageReorder={handleImageReorder}
                  disabled={localConversion.status === 'processing' || localConversion.status === 'completed'}
                />
              </CardContent>
            </Card>
          )}

          {/* Convert Button */}
          {localConversion.images.length > 0 && localConversion.status === 'pending' && (
            <div className="text-center">
              <Separator className="my-6" />
              <Button 
                onClick={processPDF}
                disabled={isProcessing}
                size="lg"
                className="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 text-lg"
              >
                {isProcessing ? (
                  <>
                    <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                    Converting to PDF...
                  </>
                ) : (
                  <>
                    <Download className="mr-2 h-5 w-5" />
                    Convert to PDF
                  </>
                )}
              </Button>
              <p className="text-sm text-gray-600 mt-2">
                Your PDF will open in a new tab when ready
              </p>
            </div>
          )}

          {/* Processing Status */}
          {localConversion.status === 'processing' && (
            <Card className="text-center">
              <CardContent className="p-8">
                <Loader2 className="h-12 w-12 animate-spin mx-auto mb-4 text-blue-600" />
                <h3 className="text-xl font-semibold mb-2">Converting Images to PDF</h3>
                <p className="text-gray-600">
                  Please wait while we process your images. This may take a few moments...
                </p>
              </CardContent>
            </Card>
          )}

          {/* Completion Status */}
          {localConversion.status === 'completed' && (
            <Card className="text-center border-green-200 bg-green-50">
              <CardContent className="p-8">
                <CheckCircle className="h-12 w-12 mx-auto mb-4 text-green-600" />
                <h3 className="text-xl font-semibold mb-2 text-green-800">PDF Created Successfully! ðŸŽ‰</h3>
                <p className="text-green-700 mb-4">
                  Your PDF should have opened in a new tab. In demo mode, a sample PDF was generated to show the functionality.
                </p>
                <Button 
                  onClick={async () => {
                    // Generate demo PDF again
                    const pdfContent = `%PDF-1.4
1 0 obj<</Type/Catalog/Pages 2 0 R>>endobj
2 0 obj<</Type/Pages/Kids[3 0 R]/Count 1>>endobj
3 0 obj<</Type/Page/Parent 2 0 R/MediaBox[0 0 612 792]/Contents 4 0 R>>endobj
4 0 obj<</Length 85>>stream
BT
/F1 24 Tf
100 700 Td
(ðŸŽ‰ Your Images Converted to PDF!) Tj
0 -50 Td
/F1 14 Tf
(Generated by Image to PDF Converter) Tj
ET
endstream endobj
xref 0 5 0000000000 65535 f 0000000009 00000 n 0000000058 00000 n 0000000115 00000 n 0000000207 00000 n trailer<</Size 5/Root 1 0 R>>startxref 350 %%EOF`;
                    const blob = new Blob([pdfContent], { type: 'application/pdf' });
                    const url = URL.createObjectURL(blob);
                    window.open(url, '_blank');
                    setTimeout(() => URL.revokeObjectURL(url), 1000);
                  }}
                  className="bg-green-600 hover:bg-green-700"
                >
                  <Download className="mr-2 h-4 w-4" />
                  View Demo PDF
                </Button>
              </CardContent>
            </Card>
          )}

          {/* Getting Started Help */}
          {localConversion.images.length === 0 && (
            <Card className="text-center border-dashed border-2 border-blue-200 bg-blue-50/30">
              <CardContent className="p-8">
                <FileImage className="h-16 w-16 mx-auto mb-4 text-blue-400" />
                <h3 className="text-xl font-semibold mb-2 text-blue-900">Ready to Get Started?</h3>
                <p className="text-blue-700 mb-6 max-w-md mx-auto">
                  1. Upload your images using the drag & drop area above<br />
                  2. Customize your PDF settings (page size & orientation)<br />
                  3. Reorder images as needed<br />
                  4. Click "Convert to PDF" to generate your document
                </p>
                <div className="flex justify-center">
                  <Button 
                    variant="outline" 
                    className="border-blue-300 text-blue-700 hover:bg-blue-100"
                    onClick={() => {
                      document.querySelector<HTMLElement>('.upload-area')?.click();
                    }}
                  >
                    <Upload className="mr-2 h-4 w-4" />
                    Start Uploading Images
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
}

export default App;